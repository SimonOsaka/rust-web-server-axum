name: Build & release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  release:
    name: ${{ matrix.target }}

    strategy:
      matrix:
        include:
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          # - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest    

    runs-on: ${{ matrix.os || 'ubuntu-latest' }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        if: startsWith(matrix.target, 'x86_64-unknown-linux-musl')
        with:
          target: ${{ matrix.target }}

      - name: Create gh release
        uses: taiki-e/create-gh-release-action@v1
        with:
          title: $version
          branch: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build OPENSSL_DIR
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
        run: |
          docker build -t x86_64-musl_with_openssl -f Dockerfile-x86_64-unknown-linux-musl .

      - name: Upload binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: app
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
          no_default_features: true
          build_tool: cargo

    